ccopy_reg
_reconstructor
p1
(chackerranksetup.challenge
Challenge
p2
c__builtin__
object
p3
NtRp4
(dp5
S'url'
p6
Vhttps://www.hackerrank.com/challenges/insertionsort1
p7
sS'_model'
p8
(dp9
Vstatus
p10
NsVsolved_count
p11
I15456
sVcan_solve
p12
I01
sVcolor
p13
NsVtime_left
p14
NsVupdated_at
p15
V2015-03-13T14:52:48Z
p16
sVhas_started
p17
I01
sVepoch_starttime
p18
NsVsuccess_ratio
p19
F0.83908794788273611
sVbody_html
p20
V<div class='msB'><p><strong>Problem Statement</strong></p></div><div class='msB'><p><strong>Sorting</strong> <br>\u000aOne common task for computers is to sort data. For example, people might want to see all their files on a computer sorted by size. Since sorting is a simple problem with many different possible solutions, it is often used to introduce the study of algorithms. </p>\u000a\u000a<p><strong>Insertion Sort</strong> <br>\u000aThese challenges will cover <em>Insertion Sort</em>, a simple and intuitive sorting algorithm. We will first start with an already sorted list.</p>\u000a\u000a<p><strong>Insert element into sorted list</strong> <br>\u000aGiven a sorted list with an unsorted number $V$ in the rightmost cell, can you write some simple code to <em>insert</em> $V$ into the array so that it remains sorted? </p>\u000a\u000a<p>Print the array every time a value is shifted in the array until the array is fully sorted. The goal of this challenge is to follow the correct order of insertion sort. </p>\u000a\u000a<p><em>Guideline:</em> You can copy the value of $V$ to a variable and consider its cell "empty". Since this leaves an extra cell empty on the right, you can shift everything over until $V$ can be inserted. This will create a duplicate of each value, but when you reach the right spot, you can replace it with $V$.</p>\u000a\u000a<p><strong>Input Format</strong> <br>\u000aThere will be two lines of input:</p>\u000a\u000a<ul>\u000a<li>$s$ - the size of the array</li>\u000a<li>$ar$ - the sorted array of integers</li>\u000a</ul>\u000a\u000a<p><strong>Output Format</strong> <br>\u000aOn each line, output the entire array every time an item is shifted in it. </p>\u000a\u000a<p><strong>Constraints</strong> <br>\u000a$1 \u005cle s  \u005cle 1000$ <br>\u000a$-10000 \u005cle V \u005cle 10000, V \u2208 ar$ </p>\u000a\u000a<p><strong>Sample Input</strong>  </p>\u000a\u000a<pre><code>5\u000a2 4 6 8 3\u000a</code></pre>\u000a\u000a<p><strong>Sample Output</strong></p>\u000a\u000a<pre><code>2 4 6 8 8 \u000a2 4 6 6 8 \u000a2 4 4 6 8 \u000a2 3 4 6 8 \u000a</code></pre>\u000a\u000a<p><strong>Explanation</strong></p>\u000a\u000a<p>$3$ is removed from the end of the array.<br/>\u000aIn the $1$<sup>st</sup> line $8 &gt; 3$, so $8$ is shifted one cell to the right. <br/>\u000aIn the $2$<sup>nd</sup> line $6 &gt; 3$, so $6$ is shifted one cell to the right. <br/>\u000aIn the $3$<sup>rd</sup> line $4 &gt; 3$, so $4$ is shifted one cell to the right. <br/>\u000aIn the $4$<sup>th</sup> line $2 &lt; 3$, so $3$ is placed at position $2$.  </p>\u000a\u000a<p><strong>Task</strong>  </p>\u000a\u000a<p>Complete the method <i>insertionSort</i> which takes in one parameter:</p>\u000a\u000a<ul>\u000a<li>$ar$ - an array with the value $V$ in the right-most cell.</li>\u000a</ul>\u000a\u000a<p><strong>Next Challenge</strong></p>\u000a\u000a<p>In the <a href="https://www.hackerrank.com/challenges/insertionsort2">next Challenge</a>, we will complete the insertion sort itself!</p></div>
p21
sVhacker
p22
(dp23
Vusername
p24
Vidlecool
p25
sVis_admin
p26
I01
sVid
p27
I1
sVavatar
p28
Vhttps://hr-avatars.s3.amazonaws.com/66d87603-0370-47b8-9792-da300a4ef756/150x150.png
p29
ssVid
p30
I342
sVleaderboard_out_of_sync
p31
I00
sVhas_ended
p32
I00
sVlanguages
p33
(lp34
Vbash
p35
aVc
aVcpp
p36
aVjava
p37
aVcsharp
p38
aVphp
p39
aVruby
p40
aVpython
p41
aVperl
p42
aVhaskell
p43
aVclojure
p44
aVscala
p45
aVlua
p46
aVgo
p47
aVjavascript
p48
aVerlang
p49
aVsbcl
p50
aVd
aVocaml
p51
aVpascal
p52
aVpython3
p53
aVgroovy
p54
aVobjectivec
p55
aVfsharp
p56
aVvisualbasic
p57
aVlolcode
p58
aVsmalltalk
p59
aVtcl
p60
aVjava8
p61
aVr
aVracket
p62
aVrust
p63
aVswift
p64
asVis_custom
p65
I00
sVcompile_and_test
p66
I01
sVleaderboard_out_of_sync_message
p67
NsVsubmit_disabled
p68
I00
sVcompany_id
p69
NsVhackos_total
p70
NsVcustom
p71
I00
sVcan_be_viewed
p72
I01
sVtrack
p73
(dp74
Vname
p75
VSorting
p76
sVtrack_slug
p77
Valgorithms
p78
sVtrack_id
p79
I3
sVtrack_name
p80
VAlgorithms
p81
sVid
p82
I38
sVslug
p83
Varrays-and-sorting
p84
ssVprimary_contest
p85
NsVfactor
p86
I10
sVis_solution_unlocked
p87
I00
sVpreview
p88
VInsert an element into a sorted array.
p89
sVrequire_unlock
p90
I01
sVbody
p91
V**Sorting**  \u000aOne common task for computers is to sort data. For example, people might want to see all their files on a computer sorted by size. Since sorting is a simple problem with many different possible solutions, it is often used to introduce the study of algorithms. \u000a\u000a**Insertion Sort**  \u000aThese challenges will cover Insertion Sort, a simple and intuitive sorting algorithm. We will first start with an already sorted list. \u000a\u000a**Insert element into sorted list**  \u000aGiven a sorted list with an unsorted number *V* in the right-most cell, can you write some simple code to <i>insert</i> *V* into the array so it remains sorted? \u000a\u000aPrint the array every time a value is shifted in the array until the array is fully sorted. The goal of this challenge is to follow the correct order of insertion sort. \u000a\u000a*Guideline:* You can copy the value of *V* to a variable, and consider its cell "empty". Since this leaves an extra cell empty on the right, you can shift everything over until *V* can be inserted. This will create a duplicate of each value, but when you reach the right spot, you can replace a value with *V*. \u000a\u000a**Input Format**  \u000aThere will be two lines of input:\u000a\u000a - *s* - the size of the array\u000a - *ar* - the sorted array of integers\u000a\u000a**Output Format**  \u000aOn each line, output the entire array every time an item is shifted in it. \u000a\u000a**Constraints**  \u000a1<=*s*<=1000   \u000a-10000<=*x*<= 10000,  *x \u2208 ar* \u000a\u000a**Sample Input**  \u000a\u000a    5\u000a    2 4 6 8 3\u000a\u000a**Sample Output**\u000a\u000a    2 4 6 8 8 \u000a    2 4 6 6 8 \u000a    2 4 4 6 8 \u000a    2 3 4 6 8 \u000a\u000a**Explanation**\u000a\u000a3 is removed from the end of the array.<br/>\u000aIn the 1<sup>st</sup> line 8 > 3, 8 is shifted one cell right. <br/>\u000aIn the 2<sup>nd</sup> line 6 > 3, 6 is shifted one cell right. <br/>\u000aIn the 3<sup>rd</sup> line 4 > 3, 4 is shifted one cell right. <br/>\u000aIn the 4<sup>th</sup> line 2 < 3, 3 is placed at position 2.  \u000a\u000a**Task**  \u000a\u000aComplete the method <i>insertionSort</i> which takes in 1 parameter:\u000a\u000a- *ar* - an array with the value *V* in the right-most cell.\u000a\u000a\u000a**Next Challenge**\u000a\u000aIn the [next Challenge](https://www.hackerrank.com/challenges/insertionsort2), we will complete the insertion sort itself!   \u000a\u000a
p92
sVcategory
p93
Vai
p94
sVpublic_solutions
p95
I01
sVdeleted
p96
I00
sVdynamic
p97
I01
sVcompany
p98
NsVis_text
p99
I00
sVsolved_score
p100
F0.5
sVdifficulty_score
p101
V0.0
p102
sVdifficulty
p103
F0.83809396689802451
sVactive
p104
I01
sV_data
p105
(dp106
Vpython_template
p107
Vdef insertionSort(ar):    \u000a    return ""\u000a
p108
sVacm_forum
p109
I00
sVsample_output
p110
V 
sVpython_template_head
p111
V#!/bin/python\u000a
p112
sVinput_format
p113
V 
sVsample_input
p114
V 
sVcpp_template_head
p115
V#include <map>\u000a#include <set>\u000a#include <list>\u000a#include <cmath>\u000a#include <ctime>\u000a#include <deque>\u000a#include <queue>\u000a#include <stack>\u000a#include <bitset>\u000a#include <cstdio>\u000a#include <vector>\u000a#include <cstdlib>\u000a#include <numeric>\u000a#include <sstream>\u000a#include <iostream>\u000a#include <algorithm>\u000ausing namespace std;
p116
sVpublic_test_cases
p117
I01
sVcpp_template
p118
Vvoid insertionSort(vector <int>  ar) {\u000a\u000a\u000a}
p119
sVc_template_head
p120
V#include <stdio.h>\u000a#include <string.h>\u000a#include <math.h>\u000a#include <stdlib.h>\u000a#include <assert.h>\u000a
p121
sVcpp_template_tail
p122
Vint main(void) {\u000a	vector <int>  _ar;\u000a	int _ar_size;\u000acin >> _ar_size;\u000afor(int _ar_i=0; _ar_i<_ar_size; _ar_i++) {\u000a	int _ar_tmp;\u000a	cin >> _ar_tmp;\u000a	_ar.push_back(_ar_tmp); \u000a}\u000a\u000ainsertionSort(_ar);\u000a	\u000a	return 0;\u000a}
p123
sVc_template_tail
p124
Vint main(void) {\u000a	\u000a	int _ar_size;\u000ascanf("%d", &_ar_size);\u000aint _ar[_ar_size], _ar_i;\u000afor(_ar_i = 0; _ar_i < _ar_size; _ar_i++) { \u000a	scanf("%d", &_ar[_ar_i]); \u000a}\u000a\u000ainsertionSort(_ar_size, _ar);\u000a	\u000a	return 0;\u000a}
p125
sVruby_template
p126
Vdef  insertionSort( ar) \u000a\u000a\u000aend
p127
sVphp_template
p128
Vfunction  insertionSort( $ar) {\u000a\u000a\u000a}
p129
sVcsharp_template_head
p130
Vusing System;\u000ausing System.Collections.Generic;\u000ausing System.IO;\u000aclass Solution {
p131
sVsubmit_disabled
p132
I00
sVperl_template
p133
V\u000asub insertionSort{\u000a	\u000a}\u000a
p134
sVcustom
p135
I00
sVcheckerlimits
p136
(dp137
Vcpp
p138
(dp139
Vtimelimit
p140
I2
ssVc
(dp141
Vtimelimit
p142
I2
sssVc_template
p143
Vvoid insertionSort(int ar_size, int *  ar) {\u000a\u000a\u000a}\u000a
p144
sVchecker_program
p145
NsVcustom_language
p146
NsVpublic_solutions
p147
I01
sVproblem_statement
p148
V**Sorting**  \u000aOne common task for computers is to sort data. For example, people might want to see all their files on a computer sorted by size. Since sorting is a simple problem with many different possible solutions, it is often used to introduce the study of algorithms. \u000a\u000a**Insertion Sort**  \u000aThese challenges will cover _Insertion Sort_, a simple and intuitive sorting algorithm. We will first start with an already sorted list.\u000a\u000a**Insert element into sorted list**  \u000aGiven a sorted list with an unsorted number $V$ in the rightmost cell, can you write some simple code to _insert_ $V$ into the array so that it remains sorted? \u000a\u000aPrint the array every time a value is shifted in the array until the array is fully sorted. The goal of this challenge is to follow the correct order of insertion sort. \u000a\u000a_Guideline:_ You can copy the value of $V$ to a variable and consider its cell "empty". Since this leaves an extra cell empty on the right, you can shift everything over until $V$ can be inserted. This will create a duplicate of each value, but when you reach the right spot, you can replace it with $V$.\u000a\u000a**Input Format**  \u000aThere will be two lines of input:\u000a\u000a - $s$ - the size of the array\u000a - $ar$ - the sorted array of integers\u000a\u000a**Output Format**  \u000aOn each line, output the entire array every time an item is shifted in it. \u000a\u000a**Constraints**  \u000a$1 \u005cle s  \u005cle 1000$   \u000a$-10000 \u005cle V \u005cle 10000, V \u2208 ar$ \u000a\u000a**Sample Input**  \u000a\u000a    5\u000a    2 4 6 8 3\u000a\u000a**Sample Output**\u000a\u000a    2 4 6 8 8 \u000a    2 4 6 6 8 \u000a    2 4 4 6 8 \u000a    2 3 4 6 8 \u000a\u000a**Explanation**\u000a\u000a$3$ is removed from the end of the array.<br/>\u000aIn the $1$<sup>st</sup> line $8 > 3$, so $8$ is shifted one cell to the right. <br/>\u000aIn the $2$<sup>nd</sup> line $6 > 3$, so $6$ is shifted one cell to the right. <br/>\u000aIn the $3$<sup>rd</sup> line $4 > 3$, so $4$ is shifted one cell to the right. <br/>\u000aIn the $4$<sup>th</sup> line $2 < 3$, so $3$ is placed at position $2$.  \u000a\u000a**Task**  \u000a\u000aComplete the method <i>insertionSort</i> which takes in one parameter:\u000a\u000a- $ar$ - an array with the value $V$ in the right-most cell.\u000a\u000a\u000a**Next Challenge**\u000a\u000aIn the [next Challenge](https://www.hackerrank.com/challenges/insertionsort2), we will complete the insertion sort itself!
p149
sVruby_template_tail
p150
Vcount = gets.to_i\u000aar = gets.strip.split.map {|i| i.to_i}\u000a\u000ainsertionSort( ar )
p151
sVpython_template_tail
p152
V\u000am = input()\u000aar = [int(i) for i in raw_input().strip().split()]\u000ainsertionSort(ar)
p153
sVoutput_format
p154
V 
sVphp_template_tail
p155
V$fp = fopen("php://stdin", "r");\u000afscanf($fp, "%d", $m);\u000a$ar = array();\u000a$s=fgets($fp);\u000a$ar = explode(" ", $s);\u000afor($i=0;$i < count($ar);$ar[$i++]+=0);\u000ainsertionSort($ar);\u000a?>
p156
sVleaderboard_out_of_sync
p157
I00
sVjava_template_head
p158
V
sVdifficulty
p159
F0.83809396689802451
sVexplanation
p160
V 
sVno_process
p161
I00
sVprecision_check
p162
I00
sVno_compile_test
p163
I00
sVno_custom_case
p164
I00
sVdifficulty_rating
p165
I4
sVrequire_unlock
p166
I01
sVplayer_count
p167
I1
sVcsharp_template
p168
Vstatic void insertionSort(int[] ar) {\u000a\u000a\u000a}
p169
sVperl_template_tail
p170
Vmy $_ar_size = <>;\u000amy $line = <>; chomp($line);\u000amy @_ar = split(/\u005cs+/, $line);\u000a\u000ainsertionSort(\u005c@_ar);
p171
sVjava_template_tail
p172
V
sVsolved_score
p173
F0.5
sVcsharp_template_tail
p174
V/* Tail starts here */\u000a    static void Main(String[] args) {\u000a           \u000a           int _ar_size;\u000a           _ar_size = Convert.ToInt32(Console.ReadLine());\u000a           int [] _ar =new int [_ar_size];\u000a           String elements = Console.ReadLine();\u000a           String[] split_elements = elements.Split(' ');\u000a           for(int _ar_i=0; _ar_i < _ar_size; _ar_i++) {\u000a                  _ar[_ar_i] = Convert.ToInt32(split_elements[_ar_i]); \u000a           }\u000a\u000a           insertionSort(_ar);\u000a    }\u000a}
p175
sVruby_template_head
p176
V
sVphp_template_head
p177
V<?php
p178
sVjava_template
p179
Vimport java.io.*;\u000aimport java.util.*;\u000aimport java.text.*;\u000aimport java.math.*;\u000aimport java.util.regex.*;\u000a\u000apublic class Solution {\u000a    \u000a    \u000a\u000a    public static void insertIntoSorted(int[] ar) {\u000a        // Fill up this function  \u000a    }\u000a    \u000a    \u000a/* Tail starts here */\u000a     public static void main(String[] args) {\u000a        Scanner in = new Scanner(System.in);\u000a        int s = in.nextInt();\u000a        int[] ar = new int[s];\u000a         for(int i=0;i<s;i++){\u000a            ar[i]=in.nextInt(); \u000a         }\u000a         insertIntoSorted(ar);\u000a    }\u000a    \u000a    \u000a    private static void printArray(int[] ar) {\u000a		for(int n: ar){\u000a			System.out.print(n+" ");\u000a		}\u000a        System.out.println("");\u000a	}\u000a    \u000a    \u000a}
p180
sVperl_template_head
p181
V# Enter your code here. Read input from STDIN. Print output to STDOUT\u000ause strict; use warnings;
p182
ssVmax_score
p183
I10
sVslug
p184
Vinsertionsort1
p185
sVcontest_slug
p186
Vmaster
p187
sVreal_dynamic
p188
I00
sVkind
p189
Vcode
p190
sVsubmitted_hackers_count
p191
I18428
sVname
p192
VInsertion Sort - Part 1
p193
sVauth_key
p194
V31e9b222-4938-482c-89a8-2539cd027f69
p195
sVpublic_test_cases
p196
I01
sVis_editorial_available
p197
I00
sVtotal_count
p198
I18420
sVcreated_at
p199
V2013-02-04T17:58:10Z
p200
sVepoch_endtime
p201
NsVavailable_translations
p202
(lp203
sVcodechecker_handle
p204
V
sVcountdown_time
p205
I0
sVcustom_case
p206
I01
sVrequirements_description
p207
NssS'_rest_endpoint'
p208
Vhttps://www.hackerrank.com/rest/contests/master/challenges/insertionsort1
p209
sb.